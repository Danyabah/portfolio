{"id":"Opbt","dependencies":[{"name":"C:\\Users\\Даня\\Desktop\\portfolio\\package.json","includedInParent":true,"mtime":1662825939615},{"name":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\package.json","includedInParent":true,"mtime":1662667073961},{"name":"../../shared/create-shadow.js","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\modules\\effect-cards\\effect-cards.js","resolved":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\shared\\create-shadow.js"},{"name":"../../shared/effect-init.js","loc":{"line":2,"column":23,"index":81},"parent":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\modules\\effect-cards\\effect-cards.js","resolved":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\shared\\effect-init.js"},{"name":"../../shared/effect-target.js","loc":{"line":3,"column":25,"index":137},"parent":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\modules\\effect-cards\\effect-cards.js","resolved":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\shared\\effect-target.js"},{"name":"../../shared/effect-virtual-transition-end.js","loc":{"line":4,"column":39,"index":209},"parent":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\modules\\effect-cards\\effect-cards.js","resolved":"C:\\Users\\Даня\\Desktop\\portfolio\\node_modules\\swiper\\shared\\effect-virtual-transition-end.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCards;\n\nvar _createShadow = _interopRequireDefault(require(\"../../shared/create-shadow.js\"));\n\nvar _effectInit = _interopRequireDefault(require(\"../../shared/effect-init.js\"));\n\nvar _effectTarget = _interopRequireDefault(require(\"../../shared/effect-target.js\"));\n\nvar _effectVirtualTransitionEnd = _interopRequireDefault(require(\"../../shared/effect-virtual-transition-end.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EffectCards(_ref) {\n  let {\n    swiper: swiper,\n    extendParams: extendParams,\n    on: on\n  } = _ref;\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null,\n      rotate: true\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides: slides,\n      activeIndex: activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate: startTranslate,\n      isTouched: isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset = $slideEl[0].swiperSlideOffset;\n\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(\"translateX(\".concat(swiper.minTranslate(), \"px)\"));\n      }\n\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset -= slides[0].swiperSlideOffset;\n      }\n\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -2 * progress;\n      let tXAdd = 8 - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = \"\".concat(-25 * subProgress * Math.abs(progress), \"%\");\n      }\n\n      if (progress < 0) {\n        // next\n        tX = \"calc(\".concat(tX, \"px + (\").concat(tXAdd * Math.abs(progress), \"%))\");\n      } else if (progress > 0) {\n        // prev\n        tX = \"calc(\".concat(tX, \"px + (-\").concat(tXAdd * Math.abs(progress), \"%))\");\n      } else {\n        tX = \"\".concat(tX, \"px\");\n      }\n\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n\n      const scaleString = progress < 0 ? \"\".concat(1 + (1 - scale) * progress) : \"\".concat(1 - (1 - scale) * progress);\n      const transform = \"\\n        translate3d(\".concat(tX, \", \").concat(tY, \", \").concat(tZ, \"px)\\n        rotateZ(\").concat(params.rotate ? rotate : 0, \"deg)\\n        scale(\").concat(scaleString, \")\\n      \");\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowEl = $slideEl.find('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0) {\n          $shadowEl = (0, _createShadow.default)(params, $slideEl);\n        }\n\n        if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = (0, _effectTarget.default)(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl: transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    (0, _effectVirtualTransitionEnd.default)({\n      swiper: swiper,\n      duration: duration,\n      transformEl: transformEl\n    });\n  };\n\n  (0, _effectInit.default)({\n    effect: 'cards',\n    swiper: swiper,\n    on: on,\n    setTranslate: setTranslate,\n    setTransition: setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}"},"sourceMaps":null,"error":null,"hash":"8ac87d5f1df4f51f7b8372dc4a42ca3a","cacheData":{"env":{}}}